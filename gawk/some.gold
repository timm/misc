#!/usr/bin/env ./gold
# vim: filetype=awk ts=2 sw=2 sts=2  et :

@include "my"
@include "lib"

function Some(i,pos,txt,w) {
  is(i,"Some")
  i.magic = 2.56
  i.max   = 256
  i.small = 0.147
  i.cohen = 0.2
  i.minSize = 0.5
  i.n = 0
  i.sorted = 0
  i.w    = w?w:1
  i.pos  = pos ? pos : 1
  i.txt  = txt
  has(i,"cuts")
  has(i,"_a")
  i.debug=0
  i.maxDepth=15
}
function SomeAdd(i,v) {
  if (v == "?") return
  i.n++
  if (i.n <= i.max) {
    i._a[ length(i._a)+1 ] = v
    i.sorted=0
  } else {
    if (i.n == i.max) 
      SomeSorted(i)
    if (rand() < i.max/i.n)
      i._a[ binChop(i._a,v) ] = v }
  return v
}
function SomeDiff(a,b,  
                  n,la,lb,j,x,lo,hi,gt,lt) {
  la = SomeSorted(a)
  lb = SomeSorted(b)
  n  = length(b._a)
  for(j in a._a) {
    x  = a._a[j]
    lo = hi= binChop(b, x)
    while(lo > 1 && b._a[lo] == x) lo--
    while(hi < n && b._a[hi] == x) hi++
    gt += lb - hi 
    lt += lo
  }
  return abs(lt-gt)/(la*lb) > a.small 
}
function SomeCut(i,lo,hi,minSize,epsilon,trivial,lvl,  
                  j,cut,min,x,after,new,start,stop,above,below) {
  if (lvl> i.maxDepth) 
    return
  if (lvl > 0 && i.debug) {
    i.trivial=trivial
    i.minSize=minSize
    i.epsilon=epsilon
    print ns(lvl-1,"| ") lo,hi, "(" hi - lo + 1 ") *"
  }
  if (lvl < 1) {
    i.sorted=asort(i._a) 
    return SomeCut(i, 
            1,                           # lo
            length(i._a),                # high
            int(length(i._a)^i.minSize), # minSize
            SomeVar(i) *i.cohen,         # epsilon  
            1.05,                        # trival
            1)                           # lvl
  }
  start = first(i._a)
  stop  = last(i._a)
  min   = SomeVar(i,lo,hi)
  for(j = lo + minSize; j<=hi-minSize; j++) {
    x     = i._a[j]
    after = i._a[j+1]
    if (x == after) continue
    below = SomePer(i,0.5,lo,j)      
    above = SomePer(i,0.5,j+1,hi)
    if ((above - below) < epsilon) continue 
    new =  SomeXpect(i,lo,j,hi)
    if (min/new < trivial) continue
    min = new
    cut = j
  }
  if (cut)  {
    SomeCut(i, lo,   cut, minSize, epsilon, trivial, lvl+1)
    SomeCut(i, cut+1, hi, minSize, epsilon, trivial, lvl+1)
  } else 
    push(i.cuts, i._a[hi])
}

function SomeXpect(i,j,mid,k,   v1,v2,n) {
  n  = k-j+1
  v1 = SomeVar(i,j,mid)
  v2 = SomeVar(i,mid+1,k)
  return 10^-32+ (mid-j)/n*v1 + (k-mid -1)/n*v2
}
function SomeSorted(i)  { # ensure we are sorted
  if (!i.sorted) i.sorted=asort(i._a) 
  return length(i._a)
}
function SomeAt(i,z)      { # get the zth item 
  if(!i.sorted) i.sorted=asort(i._a)
  return i._a[int(z)] 
}
function SomePer(i,p,j,k,   z)  {  
  # get the pth point between j and k
  j = j?j: 1
  k = k?k: length(i._a)
  p = p?p: 0.5
  if(!i.sorted) i.sorted=asort(i._a)
  z = j+p*(k-j)
  return i._a[int(z)] 
}
function SomeMid(i,j,k) { return SomePer(i,0.5,j,k) }
function SomeIQR(i,j,k) { 
  return abs(SomePer(i,.75,j,k) - SomePer(i,.25,j,k))/i.magic 
}function SomeVar(i,j,k) { 
  return abs(SomePer(i,.9,j,k) - SomePer(i,.1,j,k))/i.magic 
}
