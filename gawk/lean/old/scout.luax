-- <!--  vim: set et ts=2 sts=2 sw=2 : -->
-- 1. Group data into regions
--    - along the way, learn most informative rows and columns.
-- 2. All inference is then  sampling each local  region.
--    - e.g. data synythesis is  
--    
-- Note: LUA's scope does not extend beyond the current line.
-- So X can not use Y unless X comes after Y (so maybe 
-- read this code bottom-up?  
local the,help={},[[

SCOUT : Demo of generalized instance reasoning
(c) 2023, Tim Menzies, BSD-2.

USAGE:
  lua scout.lua [OPTIONS]

OPTIONS:
  -c --cohen size of numeric neighborhood    = .35
  -C --cf    percent fetures to mutate       = .5
  -d --d     how may decimal places to print = 2
  -F --f     cross over distance             = .3
  -f --file  where to fond data              = data/auto93.csv
  -h --help  show help                       = false
  -s --seed  random number seed              = 1234567891
  -w --want  how mGny to generate            = 10000
]]
-- ## Lib

-- ### Lint
local b4, rogues --------------------------------------------------------------

-- Cache all the names known before the code starts
b4={}; for k,v in pairs(_ENV) do b4[k]=k end

-- Report rogie locals.   
-- `rogues() --> nil` 
function rogues()
 for k,v in pairs(_ENV) do 
   if not b4[k] then print("ROGUE: ",k,type(v)) end end end

-- ### Shortcuts
local big,fmt,R  --------------------------------------------------------------

big = 1E64
fmt = string.format
R   = math.random

-- ### Sorting
local shuffle, lt, sort, sorts, order  --------------------------------------

-- Fisher–Yates shuffle; randomizes order of a table.   
-- `shuffle([x], ?fun) --> [x]`   
function shuffle(t,   j)
  for i=#t,2,-1 do j=R(i); t[i],t[j]=t[j],t[i] end; return t end

-- Returns a function that sorts on field `x`.   
-- `lt(s) --> fun`
function lt(x,     fun)
  function fun(x) return x=="?" and -big or x end
  return function(a,b) return fun(a[x]) < fun(b[x]) end end

-- sorting on some function   
-- `sort([x], ?fun) --> [x]`  
function sort(t,fun) 
  table.sort(t,fun); return t end

-- Rows sorted on "col"   
-- `sort([x], n, b) --> [n]`
function sorts(rows,col,nump,     u,v)  
  u,v = (nump and sort(rows, lt(col)) or rows), {}
  for _,x in pairs(u) do
    if x ~= "?" then v[1+#v] = x end end
  return v end

-- Iterator. Returns key,values of `t` in key ordering.  
-- `order([s=x]) --> fun --> s,x`
function order(t,     i,u)
  i,u = 0,{}
  for k,v in pairs(t) do u[1+#u] = {k,v} end
  table.sort(u, lt(1))
  return function()
    if i < #u then
      i = i+1
      return u[i][1], u[i][2] end end end 

-- ### Lists
local any,copy  --------------------------------------------------------------------

-- Return any number, selected at random.   
-- `any([x]) --> x`  
function any(t) -- return any item
  return t[R(#t)] end

function copy(x,  y) 
  if x ~= "table" then return x end
  y={}; setmetatable(y, getmetatable(x))
  for k,v in pairs(x) do y[copy(k)] = copy(v) end
  return y end

-- ### Strings to Thing
local coerce, csv,cli, settings  ---------------------------------------------------

-- Coerce string.   
-- `coerce(s) --> int | float | bool | string`
function coerce(s,    fun) 
  function fun(s) return s=="true" or (s~="false" and s) end
  return math.tointeger(s) or tonumber(s) or fun(s:match'^%s*(.*%S)') end

-- Iterator. Returns rows from a csv file.   
-- `csv(s) --> fun --> [x]`
function csv(src)  
  src = io.input(src)
  return function(    s,t)
    s,t = io.read(),{}
    if   s 
    then for s1 in s:gmatch("([^,]+)") do t[#t+1]=coerce(s1) end; return t;
    else io.close(src) end end end

-- Update settings from command line; e.g. for key `k`, look for `--k v`
-- on the command line. Boolean flags do not head arguments
-- (we just invert the default).   
-- `cli([k=v],s) --> [k=v]`
function cli(t)
  for k,v in pairs(t) do
    v = tostring(v)
    for pos,flag in pairs(arg) do
      if flag == "--"..k or flag == "-"..k:sub(0,1) then
        v = (v=="true" and "false") or (v=="false" and "true") or arg[pos+1]
        t[k] = coerce(v)  end end end
  if t.help then os.exit(print(help)) end
  return t end 

-- Parse help string to find settings.
-- `settings(s) --> [k=v]`
function settings(s,    t,pat)
  t,pat = {}, "\n[%s]+[-][%S]+[%s]+[-][-]([%S]+)[^\n]+= ([%S]+)"
  for k,s1 in s:gmatch(pat) do t[k]= coerce(s1) end
  return t end

-- ### Thing to  Strings 
local rnd,o, oo  ------------------------------------------------------------------

-- Return an integer for simple numbers, else round `n` to `d` places (default=2).   
-- `rnd(n,?d) --> n`
function rnd(it,decs,     mult)
  if type(it) ~= "number" then return it end
  if math.floor(it) == it then return it end
  mult = 10^(decs or the.d or 2)
  return math.floor(it * mult + 0.5) / mult end 

-- Generate a string, from `x`. round  number to `d` places, recurse into nested tables, sort hash tables on key.    
-- `o(x,n) --> s`     
function o(it,d,          u,fun)
  function fun(k,x) return #it==0 and fmt(":%s %s",k,x) or x end
  if type(it) == "number" then return rnd(it,d) end
  if type(it) ~= "table"  then return tostring(it) end
  u={}; for k,v in order(it) do u[1+#u] = tostring(fun(k, o(v,d))) end
  return "{"..table.concat(u," ").."}" end

-- generate `it`'s string, print `it`, return `it`   
-- `oo(x,n) --> [x]`
function oo(it,d) print(o(it,d)); return it end

-- ## Classes
local SYM,NUM,DATA,COL,COLS,ROW -----------------------------------------------
local sym,num,data,col,seen

-- ### ROW

function ROW(t)
  return {ako="ROW",cells=t; cooked=copy(t)} end

-- ### SYM
function SYM(at,txt)
  return {ako="SYM", at=at,txt=txt, seen={}} end

function sym(sym1,x)
  if x ~= "?" then sym1[x] = 1 + (sym1.seen[x] or 0) end end

-- ### NUM
function NUM(at,txt)
  return {ako="NUM", at=at,txt=txt, seen={}, bad=false,
          heaven= txt:find"-$" and 0 or 1} end

function num(num1,x) 
  if x ~= "?" then num1.seen[1+#(num1.seen)] = x; num1.bad=true end end

-- ### COL
function col(col1,x) 
  (col1.ako == "SYM" and sym or num)(col1,x) end 

function seen(col1)
  if col1.bad then col1.bad=false; table.sort(col1.seen) end 
  return col1.seen end

-- ### COLS
function COLS(t,    col1,all,x,y)
  all,x,y = {},{},{}
  for at,txt in pairs(t) do 
    col1 = (txt:find"^[A-Z]" and NUM or SYM)(at,txt)
    all[1+#all] = col1
    if not txt:find"X$" then
      if txt:find"[+-!]$" then y[1+#y]=col1 else x[1+#x]=col1 end end end
  return {ako="COLS", all=all, x=x, y=y, names=t} end 

-- ### DATA
function DATA(src,    data1) 
  data1 = {ako="DATA",rows={},cols=nil}
  if   type(src)=="string" 
  then for t   in csv(src)         do data(data1, ROW(t)) end
  else for row in pairs(src or {}) do data(data1, row)    end 
  end
  return data1 end

function data(data1,row)
  if   data1.cols 
  then data1.rows[1 + #data1.rows] = row
       for _,col1 in pairs(data1.cols.all) do 
         (col1.ako == "SYM" and sym or num)(col1, row.cells[col1.at]) end
  else data1.cols = COLS(row.cells) end end

-- ### Stats  
local per,median,stdev,mode,entropy,mid,div,stats -----------------------------

function per(t,p)  return t[#t*p//1] end

function median(t) return per(t,.5) end

function stdev(t)  return (per(t,.9) - per(t,.1))/2.56 end

function mode(t,   hi,x)
  hi=0
  for k,n in pairs(t) do if n > hi then x,hi = k,n end end
  return x end

function entropy(t,   e,N)
  N=0; for _,n in pairs(t) do N = N + n end
  e=0; for _,n in pairs(t) do e = e - n/N * math.log(n/N,2) end
  return e end

function mid(col1) 
  return (col1.ako=="NUM" and median or mode)(seen(col1)) end

function div(col1) 
  return (col1.ako=="NUM" and stdev  or entropy)(seen(col1)) end

function stats(data1,  cols,fun,d,    t)
  t={N=#data1.rows}
  for _,col1 in pairs(cols or data1.cols.y) do 
    t[col1.txt] = rnd((fun or mid)(col1),d or 2) end
  return t end

-- ### Nearby  
local div, nearby  ------------------------------------------------------------

-- return sd of a sorted column (assumes not missing values).   
-- `div([[x]], n) --> n`
function div(rows,col) 
  return (rows[#rows*.9//1][col] - rows[#rows*.1//1])[col] / 2.56 end

-- find all rows nearby some randomly selected row. Returns two valyues marking
-- the start and top of the selection range. For non-numerics, these two values are
-- the same.    
-- `nearby([[x]],n,bool)` --> x,x
function nearby(rows,col,nump,     lo,hi,sd)
  lo = any(rows)[col]
  hi = lo
  if nump then
    sd = div(rows,col)*the.cohen
    lo,hi = lo-sd/2, lo+sd/2 end -- what to do at range overflow?
  return lo,hi end

-- ### Grow 
local grow  -------------------------------------------------------------------

-- Using Storn's DE interpolation.    
-- `grow( ts, [k=v]) --> ts
function grow(rows, numps,      u, mutant)
  function mutant(nump, a, b, c, d)
    if R() > the.cf then return a end
    if not nump then return (R() > .5 and c or d) end
    return b + ((c=="?" or d=="?") and 0 or the.f(c - d))
  end -----------------------
  u = {}
  for _ = 1, the.want do
    local a, b, c, d, new = any(rows), any(rows), any(rows), any(rows), {}
    for k, v in pairs(a) do
      new[k] = mutant(numps[k], a[k], b[k], c[k], d[k])
    end
    k= R(#old)
    new[k] = old[k] -- Storn wants at least one old value in the new.
    u[1 + #u] = new
  end
  return u
end

-- ### Prune
local prune, featureOrdering, prunes  -----------------------------------------

-- Prune rows that are not nearby.    
-- ``print([[x]],n,bool)`
function prune(rows,col,nump,     u,v,lo,hi)
  u,v   = sorts(rows,col,nump),{}
  lo,hi = nearby(rows,col,nump)
  for _,x in pairs(rows) do
    if lo <= x and x <= hi then v[1+#v] = x end end
  return v end

-- Explore features in random order.   
-- ``featureOrdering( [[x]]) --> [[x]]`
function featureOrdering(rows,    u) 
  for k,_ in pairs(rows[1]) do u[1+#u] = k end
  return shuffle(u) end

-- Prune on each feature    
-- ``print( [[x]]],[k=x]) --> [[x]]`
function prunes(rows,numps)
  for _,i in pairs(featureOrdering(rows)) do
    if #rows < the.min then break end
    rows = prune(rows,t.cols.all[i],numps[i]) end
  return rows end

--## eg 
local eg,main,bad  -------------------------------------------------------------------
eg={}

function bad(s,fun)
  math.randomseed(the.seed)
  io.write("> ".. s.." ")
  if fun()==false
  then print(" ❌ FAIL"); return true
  else print("✅ PASS");  return false end end

function main()
  the = cli(settings(help))
  for _,s in pairs(arg) do if eg[s] then bad(s, eg[s]) end end 
  rogues() end

function eg.all(     n)
  n = -1 -- we have one test that deliberately fails
  for k,fun in order(eg) do
    if k~="all" then
      if bad(k,fun) then n = n + 1 end end end
  rogues()
  os.exit(n) end

function eg.the() oo(the) end

function eg.data(   d)
  print(DATA(the.file).cols.y[1]) end

--## MAIN 
main()
