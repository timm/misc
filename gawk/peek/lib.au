# vim: ft=awk ts=2 sw=2 et :

BEGIN                   { List(Au); 
                          Au.test.epsilon=0.00001
                          Au.pi= 3.141592653
                          Au.e = 2.718281828
                          Au.dot=sprintf("%c",46)  }

### List 
## initialize an empty list
## - i:untyped
function List(i)        { split("",i,"") }

### Object 
##  Initialize a new object, give it a unique id (in `i.id`)
## - i:untped
function Object(i)      { List(i); i.id = ++Au.id }

### has 
## Create something of class `f` inside `i` at position `k`
## - i:array
## - k:atom  (string or number)
## - f:?function name  (defaults to `List`).
function has(i,k,f)     { f=f?f:"List";i[k][0]; @f(i[k]);    delete i[k][0] }

### haS
## Like `has`, but accepts one constructor argument `x`.
## - i:array
## - k:atom  (string or number)
## - f:function name  (defaults to `List`).
## - x:any (something to be passed as `f(i,x)`)
function haS(i,k,f,x)   { i[k][0]; @f(i[k],x);   delete i[k][0] }

### hAS
## Like `has`, but accepts two constructor arguments `x` and `y`..
## - i:array
## - k:atom  (string or number)
## - f:function name  (defaults to `List`).
## - x:any (something to be passes as `f(i,x,y)`)
## - y:any (something to be passed as `f(i,x,y)`)
function hAS(i,k,f,x,y) { i[k][0]; @f(i[k],x,y); delete i[k][0] }


function new(i,f,k) { k=length(i)+1; has(i,k,f); return k }

function red(x)   { return "\033[31m"x"\033[0m" }
function green(x) { return "\033[32m"x"\033[0m" }

function ok(f,got,want,   epsilon,     good,s) {
  epsilon = epsilon ? epsilon : AU.test.epsilon
  if (typeof(want) == "number") 
    good = abs(want - got)/(want + 10^-32)  < epsilon
  else
    good = want == got;
  s= "#TEST:\t"(good?"PASSED":"FAILED") "\t" i "\t" want "\t" got 
  print(good ? green(s) : red(s)) }


function rogues(s) { f
  for(s in SYMTAB) if (s ~ /^[A-Z]/)  print "#W> Global: " s>"/dev/stderr" 
  for(s in SYMTAB) if (s ~ /^[_a-z]/) print "#W> Rogue: " s>"/dev/stderr" }

function z() {
  return sqrt(-2*log(rand()))*cos(2*Au.pi*rand())}

function oo(x,p,pre,      j,txt) {
  txt = pre ? pre : (p AU.dot)
  ooSortOrder(x)
  for(j in x)  
    if (j !~ /^_/) {
      if (isarray(x[j]))   {
        print(txt j"" )
        oo(x[j],"","|  " pre)
      } else
        print(txt j (x[j]==""?"": ": " x[j])) } }

function ooSortOrder(x, j) {
  for (j in x)
    return PROCINFO["sorted_in"] = \
      typeof(j + 1)=="number" ? "@ind_num_asc" : "@ind_str_asc" }

function csv(f,a,     b4, g,txt,i,old,new) {
  f = f ? f : "-"             
  g = getline < f
  if (g< 0) { print "#E> Missing f ["f"]"; exit 1 } # file missing
  if (g==0) { close(f) ; return 0 }       # end of file                   
  txt = b4 $0                             # combine with prior
  gsub(/[ \t]+/,"",txt)
  if (txt ~ /,$/) { return csv(f,a,txt) } # continue txt into next
  sub(/#.*/, "", txt)                    # kill whitespace,comments    
  if (!txt)       { return csv(f,a,txt) } # skip blanks
  split(txt, a, ",")                      # split on "," into "a"
  for(i in a) {
     old = a[i]
     new = a[i]+0
     a[i] = (old == new) ? new : old
  }
  return 1 } 
