# vim: ft=awk ts=2 sw=2 et :
@include "lib"
@include "col"

#---------- ---------- ---------- ---------- ---------- ----------
function Tab(i) {
  Object(i); i.is = "Tab"
  i.klass
  has(i,"rows");   has(i,"cols");  has(i,"names")
  has(i,"info"); has(i,"xs"); has(i,"ys") }

function _Read(i,f) {
  while(csv(record,f)) add(i,record) }

function _Add(i,a) {
  if ("cells" in a) return TabAdd(i, a.cells)
  length(i.cols) ?  TabData(i,a) : TabHeader(i,a) }

### _Header
## Initialize columns in a table.
## Column names containing `?` become `Info` columns.
## Column names containing `<>:` are `Num`bers (and all others are `Sym`s).
## Dependent variables (stored in `ys`) are marked with `<>!` 
## and all other are independent variables (stored in `xs`).
## Klass names are marked in `!`.
## - i : Tab
## - a : array of column names.
function _Header(i,a,   where, what, j) {
  for(j=1; j<=length(a); j++) {
    i.names[j] = a[j]
    if (a[j] ~ /\?/) {
      what="Info"
      where="info"
    } else {
      what = a[j] ~ /[:<>]/ ?  "Num" : "Sym"
      where= a[j] ~ /[!<>]/ ?  "ys"  : "xs"
    }
    hAS(i.cols, j, what, a[j],j)   
    i[where][j]
    if (a[j]~/!/) i.klass = j }}

### _Data
## Add an row at some random index within `rows`.
## - i : Tab; table of data.
## - a : array of data, to be read into the row.
function _Data(i,a,    r,j) {
  r = rand()
  has(i.rows, r, "Row")
  for(j=1; j<=length(a); j++) 
    i.rows[r].cells[j] = add(i.cols[j], a[j]) }

### _Clone
## Copy the structure of `i` into a new table `j`.
## - i : Tab
## - j : untyped
function _Clone(i,j) {
  Tab(j)
  TabHeader(j, i.names)
}

# ## Row
# ### Constructor
### Row
## - i : untype
function Row(i) {
  Object(i)
  has(i,"cells")
  has(i,"ranges") }

