# vim: ft=awk ts=2 sw=2 et :
@include "lib"
@include "col"

### Row #################################################

## Constructor
function Row(i:untyped) {
  Object(i)
  i.p=2
  has(i,"cells")
  has(i,"ranges") }

## Distance between two rows
function _Dist(i:Row,j:Row, tab, cols,  c,pos,x,y,d,d1,n) {
  for(c in cols) {
    pos = tab.cols[c].pos
    x   = i.cells[pos]
    y   = j.cells[pos]
    d1  = (x=="?" && y=="?") ? 1 : dist(tab.cols[c], x,y)
    d  += d1^i.p
    n++ }
  return (d/n)^(1/i.p) }

### Table ########################################

## Constructor
function Tab(i:untyped) {
  Object(i); i.is = "Tab"
  i.klass   = ""
  i.use     = "xs"
  i.above   = i.below = ""
  i.cluster = 64
  has(i,"parts","Cluster")
  has(i,"rows"); has(i,"cols"); has(i,"names")
  has(i,"info"); has(i,"xs");   has(i,"ys") }

## Load a csv file `f` into the table `i`
function _Load(i:Tab, f:fname) {
  while(csv(record,f)) {  add(i,record)} }

## Update `i` with `a`. First update creates the column headers.
function _Add(i:Tab, a:array) {
  if ("cells" in a) return TabAdd(i, a.cells)
  length(i.cols) ?  TabData(i,a) : TabHeader(i,a) }

### _Header
## Initialize columns in a table.
## Column names containing `?` become `Info` columns.
## Column names containing `<>:` are `Num`bers (and all others are `Sym`s).
## Dependent variables (stored in `ys`) are marked with `<>!` 
## and all other are independent variables (stored in `xs`).
## Klass names are marked in `!`.
## - i : Tab
## - a : array of column names.
function _Header(i,a,   where, what, j) {
  for(j=1; j<=length(a); j++) {
    i.names[j] = a[j]
    if (a[j] ~ /\?/) {
      what="Info"
      where="info"
    } else {
      what = a[j] ~ /[:<>]/ ?  "Num" : "Sym"
      where= a[j] ~ /[!<>]/ ?  "ys"  : "xs"
    }
    hAS(i.cols, j, what, a[j],j)   
    i[where][j]
    if (a[j]~/!/) i.klass = j }}

## Add an row at some random index within `rows`.
function _Data(i:Tab, a:array,    r,j) {
  r = 1E6*rand()
  has(i.rows, r, "Row")
  for(j=1; j<=length(a); j++) 
    i.rows[r].cells[j] = add(i.cols[j], a[j]) }
  if (i.cluster) && (length(i.rows) >= i.cluster)) 
     add(i.parts, a) }

## Copy the structure of `i` into a new table `j`.
function _Clone(i:Tab, j:Tab) {
  Tab(j)
  TabHeader(j, i.names) }

### Cluster ########################################

## Constructor
function Cluster(i) {
  Object(i)
  i.is = "Cluster"
  i.c=i.lo=i.hi=i.mid = 0
  has(i,"upper","Tab")
  has(i,"lower","Tab")
  has(i,"clusters")
}
function add(i:Cluster, a:array) {
  if (!i.c) _Init(i)
  add1(i,a) 
}

