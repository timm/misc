# vim: ft=awk ts=2 sw=2 et :

# Miscellaneous support code.

BEGIN { List(Gold); 
        Gold.test.epsilon=0.00001
        Gold.pi= 3.141592653
        Gold.e = 2.718281828
        Gold.dot=sprintf("%c",46)  }

# ## OO Support
### List 
## initialize an empty list
## - i : untyped
function List(i) { split("",i,"") }

### Object 
##  Initialize a new object, give it a unique id (in `i.id`)
## - i : untyped
function Object(i) { List(i); i.id = ++Gold.id }

### has 
## Create something of class `f` inside of `i` at position `k`
## - i : array
## - k : atom  (string or number)
## - f? : function name  (defaults to `List`).
function has(i,k,f) { 
   f=f?f:"List";i[k][0]; @f(i[k]); delete i[k][0]; return k}

### haS
## Like `has`, but accepts one constructor argument `x`.
## - i : array
## - k : atom  (string or number)
## - f : function name  (defaults to `List`).
## - x : any (something to be passed as `f(i,x)`)
function haS(i,k,f,x)  { i[k][0]; @f(i[k],x); delete i[k][0] }

### hAS
## Like `has`, but accepts two constructor arguments `x` and `y`..
## - i : array
## - k : atom  (string or number)
## - f : function name  (defaults to `List`).
## - x : any (something to be passes as `f(i,x,y)`)
## - y : any (something to be passed as `f(i,x,y)`)
function hAS(i,k,f,x,y) { i[k][0]; @f(i[k],x,y); delete i[k][0] }

### new
## Add a new instances of class `f` at the end of `i`.
## - i : array
## - f : constructor function
function new(i,f,    k) { k=length(i)+1; has(i,k,f); return k }

# ## Testing

### rogues
## Print local variables, escaped from functions
function rogues(   s) { f
  for(s in SYMTAB) if (s ~ /^[A-Z]/)  print "#W> Global: " s>"/dev/stderr" 
  for(s in SYMTAB) if (s ~ /^[_a-z]/) print "#W> Rogue: " s>"/dev/stderr" }

### tests
## Run the functions names in the comma-separated string `s`.
## -  s : string; command separated function names.
function tests(s,     a,i,f)
  split(s,a,",") 
  for(i in a) {
     f=a[i]
     if(f in FUNCTAB)
        @f(i) }}

### ok
## Print "PASS" if `got` same as `want1` (and print "FAIL" otherwise).
## - what : string; some id tag
## - got : value1
## - want : value2
function ok(f,got,want,   epsilon,     good,s) {
  epsilon = epsilon ? epsilon : AU.test.epsilon
  if (typeof(want) == "number") 
    good = abs(want - got)/(want + 10^-32)  < epsilon
  else
    good = want == got;
  s= "#TEST:\t"(good?"PASSED":"FAILED") "\t" i "\t" want "\t" got 
  print(good ? green(s) : red(s)) }

function red(x)   { return "\033[31m"x"\033[0m" }
function green(x) { return "\033[32m"x"\033[0m" }

# ## Maths

### z
## Sample from a Gaussian.
## - ?mu : number; defaults to 0.
## - ?sd : number; defaults to 1.
function z(mu,sd) {
  mu = mu?mu:0
  sd = sd?sd:1  
  return mu + sd*sqrt(-2*log(rand()))*cos(2*Gold.pi*rand())}

# ## Printing

### oo
## Print arrays, recursively. 
## Show keys in sorted order.
## - x : anything; what to print.
## - p : string; something to print before each item
function oo(x,p,i   pre,      j,txt) {
  txt = pre ? pre : (p Gold.dot)
  ooSortOrder(x)
  for(j in x)  
    if (j !~ /^_/) {
      if (isarray(x[j]))   {
        print(txt j"" )
        oo(x[j],"","|  " pre)
      } else
        print(txt j (x[j]==""?"": ": " x[j])) } }

function ooSortOrder(x, j) {
  for (j in x)
    return PROCINFO["sorted_in"] = \
      typeof(j + 1)=="number" ? "@ind_num_asc" : "@ind_str_asc" }

# ## Reading

### csv
## Loop over a csv file `f`, setting the array `a` to the next record.
## Returns zero at end of files.
## Complain if file is missing. Kill comments `#` and spaces.
## Split lines on commas. If records split over more than one 
## line (and end in a comma) concat that line to the next.
## Coerce numeric strings to numbers.
## - a : array; containing the next record. 
## - f? : filename; defaults to standard input.
function csv(a,f,     b4, g,txt,i,old,new) {
  f = f ? f : "-"             
  g = getline < f
  if (g< 0) { print "#E> Missing f ["f"]"; exit 1 } # file missing
  if (g==0) { close(f) ; return 0 }       # end of file                   
  txt = b4 $0                             # combine with prior
  gsub(/[ \t]+/,"",txt)
  if (txt ~ /,$/) { return csv(f,a,txt) } # continue txt into next
  sub(/#.*/, "", txt)                    # kill whitespace,comments    
  if (!txt)       { return csv(f,a,txt) } # skip blanks
  split(txt, a, ",")                      # split on "," into "a"
  for(i in a) {
     old = a[i]
     new = a[i]+0
     a[i] = (old == new) ? new : old
  }
  return 1 } 
