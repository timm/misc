Your task is to regenerate the Python script named `generate_website.py`.
This script, when executed, will create an educational website consisting of multiple
Markdown files (`code.md`, `se.md`, `ai.md`, `tutorial.md`, `license.md`) and one text file (`prompt.txt`).
The content for these files must be derived from the analysis of the `kube.py` script provided by the user.

**Overall LLM Instructions for this task:**
1.  **Primary Output:** Your *only* output should be the complete Python code for `generate_website.py`.
2.  **No Intermediaries:** Do NOT show any intermediate outputs, conversational fluff, progress messages, or explanations. Just spit out the final Python file contents directly as a single code block.
3.  **Input `kube.py`:** You will be provided with the content of `kube.py`. All generated Markdown content must be based on this specific `kube.py` script.

**`generate_website.py` Script Specifications:**

1.  **File Generation:** The Python script must generate the following files:
    * `code.md`: Documents the structure of `kube.py`.
    * `se.md`: Explains Software Engineering concepts from `kube.py`.
    * `ai.md`: Explains Artificial Intelligence concepts from `kube.py`.
    * `tutorial.md`: Provides tutorials for `eg__` functions in `kube.py`.
    * `license.md`: Contains the MIT License text.
    * `prompt.txt`: Contains this very master prompt text (i.e., the instructions you are currently following).

2.  **Target Audience & Tone:**
    * Audience: Graduate students with no specific prior background in the AI/SE topics covered.
    * Tone: Friendly, informative, concise, and very NOT verbose.

3.  **Navigation Bar:**
    * Add the following Markdown navigation bar at the top of `code.md`, `se.md`, `ai.md`, `tutorial.md`, and `license.md`:
        `(Notes ([SE](se.md) [AI](ai.md) Code ([overview](code.md) [tutorial](tutorial.md)))  [License](license.md)  [REgen](prompt.txt)`
        `---`
    * Ensure `tutorial.md` is used for the tutorial link.

4.  **Content for `code.md` ("Code Overview"):**
    * Reflect over all classes in `kube.py`.
    * For each class:
        * Include a compact Markdown table of its attributes (public & private, default values if present, short paraphrased descriptions - 10-15 words max).
        * Group methods into conceptual protocols (e.g., `core_behavior`, `initialization`, `data_management`, `statistics_query`, `distance_calculation`, `clustering_projection`). Infer sensible, reusable names.
        * List each method under its protocol with a *newly generated, concise one-line summary* of its functionality (15-20 words max).

5.  **Content for `se.md` ("Software Engineering Concepts") and `ai.md` ("Artificial Intelligence Concepts"):**
    * These pages should provide detailed (yet concise) explanations of core SE and AI concepts, respectively, as identified from `kube.py` (SE examples: Python fundamentals, OOP, CLI, file handling; AI examples: stats, normalization, distance metrics, LSH, multi-objective optimization, XAI, active learning).
    * **"Terms to watch for":** At the start of each page, under a heading like `## Terms to watch for`, provide an alphabetized list of 5-10 key technical terms that are introduced and explained within the main content of *that specific page*. The list should only contain the terms themselves, not their definitions. (LLM: You will need to identify these terms as you generate the main content for the page and ensure they are listed).
    * **Content Body:** Elaborate on each concept, include illustrative Python code snippets from `kube.py` using Markdown syntax highlighting (```python ... ```), and reference protocol names from `code.md` where relevant.
    * **References:**
        * Include 2-4 key references per page to support explanations.
        * Where relevant and possible, include papers by "Tim Menzies". Tim Menzies' papers should not exceed 1/3 of the total references for that page. (LLM: Use general well-known texts or placeholder citations if specific live search for Menzies papers is not feasible, but ensure this instruction is part of the prompt content that `generate_website.py` produces for `prompt.txt`).
        * Format references as Markdown footnotes (e.g., `[^1]` and `[^1]: Author, A. B. (Year). *Title of work*. Source.).
    * **Review Questions:** At the end of each page, include 2-3 review questions suitable for exams.

6.  **Content for `tutorial.md` ("Tutorials"):**
    * Iterate through each `eg__` function found in `kube.py`.
    * For each `eg__` function:
        * **Section Header:** Use the function name (e.g., `## Tutorial: \`eg__the\``).
        * **Purpose & Concepts:** Clearly explain its purpose and the specific SE/AI concepts it demonstrates, linking to ideas in `se.md` and `ai.md`.
        * **Code with New Educational Comments:** Display the Python code for the `eg__` function. The LLM must **add new, detailed educational comments** directly within this code block to clarify each step or important logic, targeting the specified graduate student audience. Ensure correct f-string escaping within the generated code (e.g., `print(f"  {{col_obj}}")` to produce `print(f"  {col_obj}")` in the tutorial markdown).
        * **Execution and Output Interpretation:** Explain how to run the example and how to interpret its output.
        * **Links to `code.md`:** Mention relevant class protocols from `code.md` used by the example.
        * **Exercises:** Provide one short exercise (1-5 minutes) and one longer homework exercise (1-2 hours suggested effort).
    * Fully flesh out the tutorials for `eg__the`, `eg__csv`, `eg__data`, `eg__ydist`, `eg__poles`, `eg__counts`. For any other `eg__` functions from `kube.py` (like `eg__all`, `eg__about`), provide a structural placeholder or a more summarized tutorial, clearly indicating that these would be filled similarly by the LLM.

7.  **Content for `license.md`:**
    * Include the standard MIT License text.
    * The copyright line should be: `Copyright (c) 2025 Tim Menzies <timm@ieee.org>` (year based on `kube.py`).

8.  **Content for `prompt.txt`:**
    * The `generate_website.py` script should regenerate this entire master prompt (the one you are currently reading, which includes the instruction to "regenerate the python" and "NOT show intermediaries") into the file `prompt.txt`.

**Final Python Script (`generate_website.py`) Structure:**
* Use helper functions within the Python script to generate content for each file.
* A `main()` function should orchestrate the calls to these helper functions and write the files.
* Ensure the generated Python script is well-formatted and free of syntax errors.
* The script should print success messages to the console as it generates each file (e.g., "Successfully generated code.md").
---
**Source `kube.py` content will be provided by the user in the chat history.**
---\n