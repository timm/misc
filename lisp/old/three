#!/usr/bin/env clisp
;  vim: set filetype=lisp tabstop=2 shiftwidth=2 expandtab : 

; collect select reject inject visit
; http://www.cs.cmu.edu/~ggordon/lisp-hints.txt
; http://sellout.github.io/media/CL-type-hierarchy.png

(defstruct emp (name 0) (dob 0) (shoesize 0))

(defun slot-names(x)
  (labels 
   ((slots (y) ; what are the slots of a class?
            #+clisp (class-slots (class-of y))
            #+sbcl  (sb-mop:class-slots (class-of y)))
     (name (y) ; what is a slot's name?
            #+clisp (slot-definition-name y)
            #+sbcl  (sb-mop:slot-definition-name y)))
    (mapcar #'name (slots x))))

(defun show (x)
  (mapcar #'(lambda(slot)
              (cons slot (slot-value x slot))) 
          (slot-names x)))

(print (show (make-emp)))

(let ((names '((sure . 1)
               (probably . 0.7)
               (maybe .  0.4)

(defun -copy-list (lst)
  (labels ((cl (x)
             (if (atom x)
                 x
                 (cons (car x)
                       (cl (cdr x))))))
    (cons (car lst)
          (cl (cdr lst)))))

(defun -copy-tree (tr)
  (if (atom tr)
      tr
      (cons (-copy-tree (car tr))
            (-copy-tree (cdr tr)))))

   exercise 4.2 - Write a function FURTHER that makes a positive
;   number larger by adding one to it, and a negative number smaller
;   by subtracting one from it.  What does your function do if given
;   the number 0?

(defun further (n)
  (cond ((> n 0) (+ n 1))
  ((< n 0) (- n 1))
  (t n)))

 ;  exercise 4.29 - Write versions of LOGICAL-AND using IF and COND
;   instead of AND.

(defun logical-and-if (x y)
  (if x (if y t)))

(defun logical-and-cond (x y)
  (cond (x (cond (y t)))))

;   exercise 4.18 - Write a function to act as referee in the
;   ROCK-SCISSORS-PAPER game. 


(defun rockp (hand)
  (equal hand 'ROCK))

(defun scissorp (hand)
  (equal hand 'SCISSOR))

(defun paperp (hand)
  (equal hand 'PAPER))

(defun play (p1 p2)
  (cond ((equal p1 p2) 'TIE)
  ((and (rockp p1) (scissorp p2)) 'FIRST-WINS)
  ((and (paperp p1) (rockp p2)) 'FIRST-WINS)
  ((and (scissorp p1) (paperp p2)) 'FIRST-WINS)
  (t 'SECOND-WINS)))


;   exercise 6.6. - Use the LAST function to write a function called
;   LAST_ELEMENT that returns the last element of a list instead of 
;   the last cons cell. Write another version of LAST-ELEMENT using
;   REVERSE instead of last. Write another version using NTH and
;   LENGTH.

(defun last-element-a (list)
  (car (last list)))

(defun last-element-b (list)
  (car (reverse list)))

(defun last-element-c (list)
  (let ((n (length list)))
    (nth (- n 1) list)))
