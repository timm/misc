#!/usr/bin/env bash

Stem=$(basename $1 ".fun")
In=${Stem}.fun
Out=/tmp/${Stem}$$.fun

( #### transpiling
echo "#!/usr/bin/env gawk -f"
echo ""

cat <<-EOF
BEGIN{  DOT="." }
function has( i,k,f)      { f=f?f:"List"; zap(i,k); @f(i[k]) }
function hass(i,k,f,m)    {               zap(i,k); @f(i[k],m) }
function hasss(i,k,f,m,n) {               zap(i,k); @f(i[k],m,n) }

function zap(i,k)         { i[k][0]; List(i[k])} 
function List(i)          { split("",i,"") }
function Object(i)        { List(i); i["oid"]=++OID }

EOF

gawk '
function dots(s) {
  return gensub(/\.([^0-9])([a-zA-Z0-9_]*)/,
                "[\"\\1\\2\"]","g",s) } 
 
function reads(f,    used,        show,line,file) {
  if (!used[f]) { 
    used[f]=1
    print  "\n#### " f " #############################\n"
    while((getline line < f) > 0) 
     if (line ~ /^@include/) 
       reads( gensub(/.*"(.*)".*/,
                    "\\1.fun","g",line), used)
     else {
       if (line ~ /^}/)                    { show=0; print line;       continue } 
       if (line ~ /^(func|BEGIN|END).*}$/) { show=0; print dots(line); continue }
       if (line ~ /^(func|BEGIN|END)/)     { show=1; }
       print (show ? dots(line) : "# " line) }}
}

BEGIN { reads("'$In'")}
' #### end transpiling
) > $Out


shift
if    [ ! -t 0 ]
then  cat - |  gawk -f $Out $*
else  gawk -f $Out $*
fi
