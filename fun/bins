#!/usr/bin/env ./fun
# vim: filetype=awk ts=2 sw=2 sts=2  et :

## hello


@include "lib"

sadasd
adasd

this is unsuper. it should be followed by super

needs a pre-processor cols (to prune sillies)

cat | clean | cols | ranges | super | rows | cluster | privitize | contrast

repeat the above without super 

function Bins(i) {
  i.data = "data/weather" DOT "csv"
  i.sep  = ","
  i.step = 0.5
  i.max = 256
  i.magic = 2.56
  i.cohen = 0.3
  i.trivial = 0.3}

function Table(i) {
  Object(i)
  has(i,"rows")
  has(i,"names")
  has(i,"nums") }

function TableFile(i,f,   c,r) { lines(i,f, "Table1") }

function TableChop(i,   c) {
  for(c in i.nums) {
    SomeCuts(i.nums[c])
    TableBins(i,c, i.nums[c].cuts,i.rows)}}

function TableDump(i,   r) {
  print(cat(i.names))
  for(r in i.rows)
    print(cat(i.rows[r].cells)) }

function TableBins(i,c,cuts,rows,    cut,r,r1,cell) {
  r=cellsort(i.rows,c)
  cut=1
  for(r1=1;r1<=r;r1++) {
    if ((cell = i.rows[r1].cells[c]) != "?") {
      while (cell >  cuts[cut]) cut++
      i.rows[r1].cells[c] = cuts[cut]  }}}

function Table1(i,r,lst,      c,x) {
  if (r>1)  
    return hasss(i.rows,r-1,"Row",lst,i)
  # Set up nums and syms named in row1
  for(c in lst)  {
    x = i.names[c] = lst[c]
    if (x ~ /[\$<>]/) 
      has(i.nums,c,"Some") }}

function Row(i,lst,t,     x,c) {
  Object(i)
  has(i,"cells")
  for(c in t.names) {
    x = lst[c]
    if (x != "?") {
      if (c in t.nums) {
         x += 0
         Some1(t.nums[c], x) }
      i.cells[c] = x }}}

function SomeCut(i,   cutter) {
  Cuts(cutter,i)
  List(i.cuts)
  _Cuts(cutter,i,1,l(i.has)) }

function Some(i) {
  Object(i)
  i.magic = G.magic
  i.max   = G.max
  has(i,"has")
  has(i,"cuts")
  i.sorted = 0
  i.n  = 0 }

function Some1(i,x) {
  if (x == "?") return
  i.n++
  if (i.n < i.max) {
    i.has[ l(i.has)+1 ] = x
    i.sorted=0
  } else {
    if (i.n == i.max) 
      i.sorted = asort(i.has)
    if (rand() < i.max/i.n)
      i.has[ bsearch(i.has,x) ] = x }}

function Cuts(i,some,    n) {
  Object(i)
  n         = l(some.has)
  i.cohen   = G.cohen
  i.start   = some.has[ 1 ]
  i.stop    = some.has[ n ]
  i.step    = n^G.step
  i.trivial = G.trivial 
  i.epsilon = sd(some,1, n )*i.cohen }

function _Cuts(i,some,lo,hi,       
                 j,cut,min,now,after,new) {
  if (hi - lo > i.step) {
    min  = sd(some,lo,hi)
    for(j = lo + i.step; j<=hi-i.step; j++) {
      now =  at(some,j)
      after = at(some,j+1)
      if (now != after && 
          after - i.start > i.epsilon && 
          i.stop - now    > i.epsilon &&
          mid(some,j+1,hi) - mid(some,lo,j) > i.epsilon && 
          min > (new = xpect(some,lo,j,hi)) * i.trivial) {
             min = new
             cut = j }}}
  if (cut) {
    _Cuts(i,some,lo,    cut)
    _Cuts(i,some,cut+1, hi)
  } else
    some.cuts[l(some.cuts)+1] = some.has[cut] }

# For any object containing a list i.has,  compute some stats
function sorted(i)    { if (!i.sorted) i.sorted=asort(i.has) }
function at(i,z)      { sorted(i);  return i.has[int(z)] }
function per(i,j,k,p) { return at(j + p*(k-j)) }
function mid(i,j,k)   { return at(j + .5*(k-j) ) }
function sd(i,j,k)    {
   return abs(per(i,j,k,.9) - per(i,j,k,.1))/i.magic }
function xpect(i,j,m,k,   n) {
  n=k-j+1
  return (m-j)/n*sd(i,j,m) + (k-m -1)/n*sd(i,m+1,k) }
function nth(i,x) { sorted(i); return bsearch(i.has,x)/l(i.has) }

function main( t) { 
   Bins(G); argv(G);  FS=G.sep ; oo(G); 
   Table(t)
   TableFile(t, G.data)
   oo(t)
   rogues()}

BEGIN { if (THIS=="bins") main() }
